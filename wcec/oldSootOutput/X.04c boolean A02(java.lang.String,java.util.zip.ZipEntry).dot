     $r4 = virtualinvoke $r2.getName()
     $r5 = r0.A01
     $r6 = $r5.A00
     $z0 = virtualinvoke $r1.equals($r6)
     $r5.A00 = null
     label02: $r8 = r0.A00
     $r7 = newarray (java.lang.Object)1
     $r70 = $r1
     $r1 = \allowing consideration of corrupted lib %s\
     label01: staticinvoke java.lang.String.format($r1 $r7)
     $r3 = new java.io.File
     label03: $r6 = virtualinvoke $r3.getCanonicalPath()
     $r9 = virtualinvoke $r8.getCanonicalPath()
     $z0 = virtualinvoke $r6.startsWith($r9)
     label04: if $z0 != 0 goto label07
     $r7 = newarray (java.lang.Object)2
     label07: $z0 = virtualinvoke $r3.isFile()
     $r70 = $r4
     $r71 = $r1
     label05: staticinvoke java.lang.String.format(\not allowing consideration of %s: %s not in lib dir\ $r7)
     label06: goto label10
     $r7 = newarray (java.lang.Object)2
     label08: $l0 = virtualinvoke $r3.length()
     $r70 = $r4
     $r71 = $r1
     $r1 = \allowing consideration of %s: %s not in system lib dir\
     goto label01
     $l1 = virtualinvoke $r2.getSize()
     $b2 = $l0 cmp $l1
     $r7 = newarray (java.lang.Object)3
     $r70 = $r3
     $r10 = staticinvoke java.lang.Long.valueOf($l0)
     $r71 = $r10
     $r10 = staticinvoke java.lang.Long.valueOf($l1)
     $r72 = $r10
     $r1 = \allowing consideration of %s: sysdir file length is %s but the file is %s bytes long in the APK\
     goto label01
     $r7 = newarray (java.lang.Object)3
     $r70 = $r4
     $r71 = $r1
     $r1 = virtualinvoke $r11.toString()
     $r72 = $r1
     staticinvoke java.lang.String.format(\not allowing consideration of %s: %s IOException when constructing path: %s\ $r7)
